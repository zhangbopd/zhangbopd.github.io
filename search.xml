<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CUDA Pro Tip 之使用向量化内存访问提高性能</title>
      <link href="/2023/05/03/2023-05-03-cuda-pro-tip-increase-performance-with-vectorized-memory-access/"/>
      <url>/2023/05/03/2023-05-03-cuda-pro-tip-increase-performance-with-vectorized-memory-access/</url>
      
        <content type="html"><![CDATA[<blockquote><p>默而识之，学而不厌，诲人不倦</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>许多 CUDA Kernels 受到带宽瓶颈限制，新硬件中 Flops 与带宽之比增加使得 Bandwidth bound 更加显著。本文探索如何在 CUDA C/C++ 中使用向量化读写提高带宽利用率，并减少指令的数量。</p><h2 id="标量读取数据"><a href="#标量读取数据" class="headerlink" title="标量读取数据"></a>标量读取数据</h2><p>一个简单的内存拷贝 kernel：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">__global__ <span class="token keyword">void</span> <span class="token function">device_copy_scalar_kernel</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> idx <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    d_out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> d_in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">device_copy_scalar</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> threads <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads<span class="token punctuation">;</span>  device_copy_scalar_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>blocks<span class="token punctuation">,</span> threads<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以使用CUDA 工具包中包含的<code>cuobjdump</code>工具检查 kernel 的指令集。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cuobjdump --dump-sass 可执行文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标量复制内核主体的 SASS 如下：</p><pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">/*0070*/           MOV R5, 0x4 ;                                  /* 0x0000000400057802 */</span><span class="token comment">/*0080*/           IMAD.WIDE R2, R0, R5, c[0x0][0x160] ;          /* 0x0000580000027625 */</span><span class="token comment">/*0090*/           LDG.E.SYS R3, [R2] ;                           /* 0x0000000002037381 */</span><span class="token comment">/*00a0*/           IMAD.WIDE R4, R0, R5, c[0x0][0x168] ;          /* 0x00005a0000047625 */</span><span class="token comment">/*00b0*/           MOV R7, c[0x0][0x0] ;                          /* 0x0000000000077a02 */</span><span class="token comment">/*00c0*/           IMAD R0, R7, c[0x0][0xc], R0 ;                 /* 0x0000030007007a24 */</span><span class="token comment">/*00d0*/           ISETP.GE.AND P0, PT, R0, c[0x0][0x170], PT ;   /* 0x00005c0000007a0c */</span><span class="token comment">/*00e0*/           STG.E.SYS [R4], R3 ;                           /* 0x0000000304007386 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第 3 行的<code>LDG.E</code> 和第 8 行的 <code>STG.E</code> 命令分别从指定地址加载和存储数据，我们可以通过使用向量化加载和存储指令<code>LD.E.{64,128} </code>和 <code>ST.E.{64,128}</code> 来提高此操作的性能。这些操作同样可以加载和存储数据，但是以 64 位或 128 位宽度执行。向量化加载可减少指令总数、减少延迟并提高带宽利用率。</p><p>使用向量化加载的最简单方法是使用 CUDA C/C++ 标准头文件中定义的向量数据类型，例如 <code>int2</code>、<code>int4</code> 或 <code>float2</code>等等。可以通过 C/C++ 中的类型转换轻松使用这些类型。例如，在 C++ 中，使用 <code>reinterpret_cast&lt;int2*&gt;(d_in)</code> 将 <code>int*</code> 类型的指针 <code>d_in</code> 转换为<code>int2*</code> 类型的指针。在 C99 中，可以使用转换运算符来做同样的事情：<code>(int2*(d_in))</code></p><p>但是需要注意：这些指令需要数据对齐。设备分配的内存自动对齐到数据类型大小的倍数，但如果偏移指针，指针的偏移量也必须对齐。例如 <code>reinterpret_cast&lt;int2*&gt;(d_in+1)</code> 无效，因为 <code>d_in+1</code> 未与 <code>sizeof(int2)</code>的倍数对齐。</p><p>如果使用“对齐”偏移量，则可以安全地偏移数组，例如 <code>reinterpret_cast&lt;int2*&gt;(d_in+2)</code>。此外，还可以使用结构生成矢量化负载，只要该结构的大小是两个字节的幂数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">double</span> c<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 16 bytes in size</span>Foo <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="向量化读取数据"><a href="#向量化读取数据" class="headerlink" title="向量化读取数据"></a>向量化读取数据</h2><p>了解了如何生成向量化指令后，拷贝核函数可以修改为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">__global__ <span class="token keyword">void</span> <span class="token function">device_copy_float2_kernel</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> idx <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float2 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_out<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float2 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_in<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// in only one thread, process final element (if there is one)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> N <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> N <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    d_out<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> d_in<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">device_copy_float2</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> threads <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads<span class="token punctuation">;</span>  device_copy_float2_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>blocks<span class="token punctuation">,</span> threads<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，循环现在只执行 <code>N</code>/ 2 次，因为每次迭代处理两个元素。其次，我们需要使用上文提到的类型转换。第三，如果 <code>N</code> 不能被 2 整除，需要处理剩余元素。最后，发射的线程数减少了一半。</p><p>检查 SASS 可以看到以下内容：</p><pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">/*0100*/           IMAD.MOV.U32 R3, RZ, RZ, 0x8 ;                  /* 0x00000008ff037424 */</span><span class="token comment">/*0110*/           IMAD.WIDE R4, R0, R3, c[0x0][0x160] ;           /* 0x0000580000047625 */</span><span class="token comment">/*0120*/           LDG.E.64.SYS R4, [R4] ;                         /* 0x0000000004047381 */</span><span class="token comment">/*0130*/           IMAD.WIDE R2, R0, R3, c[0x0][0x168] ;           /* 0x00005a0000027625 */</span><span class="token comment">/*0140*/           MOV R9, c[0x0][0x0] ;                           /* 0x0000000000097a02 */</span><span class="token comment">/*0150*/           IMAD R0, R9, c[0x0][0xc], R0 ;                  /* 0x0000030009007a24 */</span><span class="token comment">/*0160*/           ISETP.GE.AND P1, PT, R0, R7, PT ;               /* 0x000000070000720c */</span><span class="token comment">/*0170*/           STG.E.64.SYS [R2], R4 ;                         /* 0x0000000402007386 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在编译器生成 <code>LDG.E.64</code> 和 <code>STG.E.64</code>。应该注意的是，此时执行的指令数量将减少一半，因为循环只执行了 <code>N</code>/2 次。指令数的减少在指令瓶颈 (instruction-bound) 或者延迟瓶颈 (latency-bound kernels) 中非常重要。</p><p>同理，我们也可以写一个 vector4 版本的拷贝核函数：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">__global__ <span class="token keyword">void</span> <span class="token function">device_copy_float4_kernel</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> idx <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float4 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_out<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float4 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_in<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// in only one thread, process final elements (if there are any)</span>  <span class="token keyword">int</span> remainder <span class="token operator">=</span> N <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> N <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> remainder <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> idx <span class="token operator">=</span> N <span class="token operator">-</span> remainder<span class="token operator">--</span><span class="token punctuation">;</span>      d_out<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> d_in<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">device_copy_float4</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> threads <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads<span class="token punctuation">;</span>  device_copy_float4_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>blocks<span class="token punctuation">,</span> threads<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应的SASS如下：</p><pre class="line-numbers language-sass" data-language="sass"><code class="language-sass"><span class="token comment">/*0110*/           IMAD.MOV.U32 R8, RZ, RZ, 0x10 ;                  /* 0x00000010ff087424 */</span><span class="token comment">/*0120*/           IMAD.WIDE R4, R3, R8, c[0x0][0x160] ;            /* 0x0000580003047625 */</span><span class="token comment">/*0130*/           LDG.E.128.SYS R4, [R4] ;                         /* 0x0000000004047381 */</span><span class="token comment">/*0140*/           IMAD.WIDE R8, R3, R8, c[0x0][0x168] ;            /* 0x00005a0003087625 */</span><span class="token comment">/*0150*/           IMAD.MOV.U32 R12, RZ, RZ, c[0x0][0x0] ;          /* 0x00000000ff0c7624 */</span><span class="token comment">/*0160*/           IMAD R3, R12, c[0x0][0xc], R3 ;                  /* 0x000003000c037a24 */</span><span class="token comment">/*0170*/           ISETP.GE.AND P1, PT, R3, R10, PT ;               /* 0x0000000a0300720c */</span><span class="token comment">/*0180*/           STG.E.128.SYS [R8], R4 ;                         /* 0x0000000408007386 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到生成指令为 <code>LDG.E.128</code> 和 <code>STG.E.128</code>，此版本的代码将指令数减少了 4 倍。</p><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><center><img src="https://raw.githubusercontent.com/zhangbopd/PicsForBlog/main/2023-05/scalar-vs-vector.svg" width="80%" height="80%">Fig. 1 Copy bandwidth as a function of copy size</center><p>几乎所有情况下，向量化加载都优于标量负载。但应该注意，向量化加载会增加寄存器压力并降低整体并行性。因此，如果需要优化的 kernel 已经受到寄存器限制或并行度非常低，仍可以使用标量加载。此外，如前文所述，如果数据指针未对齐或的数据类型大小（以字节为单位）不是 2 的幂，则不能使用矢量化加载。矢量化加载是一种基本的 CUDA 优化，应该尽可能使用它，因为它们可以增加带宽、减少指令数并减少延迟。</p><p>除了使用 <code>cuobjdump</code>，我们也可以使用如下命令编译生成 ptx 指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nvcc <span class="token parameter variable">-ptx</span> <span class="token parameter variable">-arch</span><span class="token operator">=</span>sm_70 bandwidth.cu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-ptx" data-language="ptx"><code class="language-ptx">ld.global.f32 %f1, [%rd6];add.s64 %rd7, %rd1, %rd5;st.global.f32 [%rd7], %f1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ptx" data-language="ptx"><code class="language-ptx">ld.global.v2.u32 {%r13, %r14}, [%rd7];st.global.v2.u32 [%rd6], {%r13, %r14};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-ptx" data-language="ptx"><code class="language-ptx">ld.global.v4.u32 {%r23, %r24, %r25, %r26}, [%rd21];st.global.v4.u32 [%rd20], {%r23, %r24, %r25, %r26};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="测试代码："><a href="#测试代码：" class="headerlink" title="测试代码："></a>测试代码：</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snssns<span class="token punctuation">.</span>reset_defaults<span class="token punctuation">(</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>set_theme<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">'whitegrid'</span><span class="token punctuation">)</span><span class="token comment"># benchmark</span><span class="token keyword">def</span> <span class="token function">bench</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">,</span> float2<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> float4<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cc<span class="token operator">=</span><span class="token string">'nvcc'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'-arch=sm_70'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> !<span class="token punctuation">{</span>cc<span class="token punctuation">}</span> <span class="token operator">-</span>O2 <span class="token punctuation">{</span>arch<span class="token punctuation">}</span> <span class="token operator">-</span>D LN<span class="token operator">=</span><span class="token punctuation">{</span>n<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token string">"-D FLOAT2"</span> <span class="token keyword">if</span> float2 <span class="token keyword">else</span> <span class="token string">""</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token string">"-D FLOAT4"</span> <span class="token keyword">if</span> float4 <span class="token keyword">else</span> <span class="token string">""</span><span class="token punctuation">}</span> bandwidth<span class="token punctuation">.</span>cu <span class="token operator">-</span>o run <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">.</span><span class="token operator">/</span>run    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>nlist <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scalar_res <span class="token operator">=</span> <span class="token punctuation">[</span>bench<span class="token punctuation">(</span>n<span class="token operator">=</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> nlist<span class="token punctuation">]</span>float2_res <span class="token operator">=</span> <span class="token punctuation">[</span>bench<span class="token punctuation">(</span>n<span class="token operator">=</span>n<span class="token punctuation">,</span> float2<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> nlist<span class="token punctuation">]</span>float4_res <span class="token operator">=</span> <span class="token punctuation">[</span>bench<span class="token punctuation">(</span>n<span class="token operator">=</span>n<span class="token punctuation">,</span> float4<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> nlist<span class="token punctuation">]</span><span class="token comment"># plot</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'scalar_res.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>scalar_res<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'scalar_res.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    scalar_res <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'float2_res.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>float2_res<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'float2_res.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    float2_res <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'float4_res.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>float4_res<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'float4_res.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    float4_res <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>nlist<span class="token punctuation">,</span> scalar_res<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'darkred'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'scalar'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>nlist<span class="token punctuation">,</span> float2_res<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'vector2'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>nlist<span class="token punctuation">,</span> float4_res<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'vector4'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Array Size (float32)'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>nlist<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'$2^{{</span><span class="token interpolation"><span class="token punctuation">{</span>i<span class="token punctuation">}</span></span><span class="token string">}}$'</span></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> nlist<span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'GB/s'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Copy Bandwidth (Tesla V100-SXM2)'</span><span class="token punctuation">,</span> pad<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span>bottom<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>margins<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>gcf<span class="token punctuation">(</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">'scalar-vs-vector.svg'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">FLOAT2</span></span>__global__ <span class="token keyword">void</span> <span class="token function">device_copy_float2_kernel</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> idx <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float2 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_out<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float2 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_in<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// in only one thread, process final element (if there is one)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> N <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> N <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    d_out<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> d_in<span class="token punctuation">[</span>N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">device_copy_float2</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> threads <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads<span class="token punctuation">;</span>  device_copy_float2_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>blocks<span class="token punctuation">,</span> threads<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>FLOAT4<span class="token punctuation">)</span></span></span>__global__ <span class="token keyword">void</span> <span class="token function">device_copy_float4_kernel</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> idx <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float4 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_out<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>float4 <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>d_in<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// in only one thread, process final elements (if there are any)</span>  <span class="token keyword">int</span> remainder <span class="token operator">=</span> N <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> N <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> remainder <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remainder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> idx <span class="token operator">=</span> N <span class="token operator">-</span> remainder<span class="token operator">--</span><span class="token punctuation">;</span>      d_out<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> d_in<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">device_copy_float4</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> threads <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">+</span> threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads<span class="token punctuation">;</span>  device_copy_float4_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>blocks<span class="token punctuation">,</span> threads<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>__global__ <span class="token keyword">void</span> <span class="token function">device_copy_scalar_kernel</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> idx <span class="token operator">=</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">*</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> idx<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> gridDim<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    d_out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> d_in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">device_copy_scalar</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>d_out<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> threads <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> blocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> threads <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threads<span class="token punctuation">;</span>  device_copy_scalar_kernel<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>blocks<span class="token punctuation">,</span> threads<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">LN</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LN</span> <span class="token expression"><span class="token number">28</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> LN<span class="token punctuation">;</span>  <span class="token keyword">float</span> <span class="token operator">*</span>in<span class="token punctuation">,</span> <span class="token operator">*</span>out<span class="token punctuation">,</span> <span class="token operator">*</span>d_in<span class="token punctuation">,</span> <span class="token operator">*</span>d_out<span class="token punctuation">;</span>  in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  out <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d_in<span class="token punctuation">,</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaMalloc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d_out<span class="token punctuation">,</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> in<span class="token punctuation">,</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cudaMemcpyHostToDevice<span class="token punctuation">)</span><span class="token punctuation">;</span>  cudaEvent_t start<span class="token punctuation">,</span> stop<span class="token punctuation">;</span>  <span class="token function">cudaEventCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaEventCreate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaEventRecord</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">FLOAT2</span></span>  <span class="token function">device_copy_float2</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">elif</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>FLOAT4<span class="token punctuation">)</span></span></span>  <span class="token function">device_copy_float4</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span>  <span class="token function">device_copy_scalar</span><span class="token punctuation">(</span>d_in<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>  <span class="token function">cudaEventRecord</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaMemcpy</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> d_out<span class="token punctuation">,</span> N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cudaMemcpyDeviceToHost<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaEventSynchronize</span><span class="token punctuation">(</span>stop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">float</span> milliseconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">cudaEventElapsedTime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>milliseconds<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Effective Bandwidth (GB/s): %f\n"</span><span class="token punctuation">,</span>         N <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">/</span> milliseconds <span class="token operator">/</span> <span class="token number">1e6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaFree</span><span class="token punctuation">(</span>d_in<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cudaFree</span><span class="token punctuation">(</span>d_out<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Reference："><a href="#Reference：" class="headerlink" title="Reference："></a>Reference：</h2><ul><li><a href="https://developer.nvidia.com/blog/cuda-pro-tip-increase-performance-with-vectorized-memory-access/">CUDA Pro Tip: Increase Performance with Vectorized Memory Access</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> CUDA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CUDA </tag>
            
            <tag> GPGPU </tag>
            
            <tag> HPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Books &amp; Websites</title>
      <link href="/2023/05/02/2023-05-02-books-and-webs/"/>
      <url>/2023/05/02/2023-05-02-books-and-webs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>怕什么真理无穷，进一寸有一寸的欢喜</p></blockquote><h2 id="Books"><a href="#Books" class="headerlink" title="Books"></a>Books</h2><ul><li>《Python Linux 系统管理与自动化运维》</li><li>《Fluent Python》</li><li>《C++ Primer》</li><li>《Effective C++》</li><li>《More Effective C++》</li><li>《C++ 程序设计原理》</li><li>《深入探索C++对象模型》</li><li>《STL 源码剖析》</li><li>《计算机网络系统方法》</li><li>《TPC/IP详解》</li><li>《java8实战》</li><li>《人月神话》</li><li>《深入理解计算机系统》</li><li>《现代操作系统》</li><li>《编译原理》</li></ul><h2 id="Websites"><a href="#Websites" class="headerlink" title="Websites"></a>Websites</h2><ul><li><p><a href="https://openmlsys.github.io/index.html#">《机器学习系统：设计和实现》</a></p></li><li><p><a href="https://www.aosabook.org/en/index.html">The Architecture of Open Source Applications</a></p></li><li><p><a href="https://graphics.stanford.edu/~seander/bithacks.html">Bit Twiddling Hacks</a></p></li><li><p><a href="https://www.schoolofhaskell.com/">School of Haskell</a></p></li><li><p><a href="https://oschina.gitee.io/learn-git-branching/">Learn Git Branching</a></p></li><li><p><a href="https://datawhalechina.github.io/thorough-pytorch/index.html">深入浅出 PyTorch</a></p></li><li><p><a href="https://en.algorithmica.org/">Algorithmica</a></p></li><li><p><a href="https://devdocs.io/">DevDocs API</a></p></li><li><p><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell for Great Good!</a></p></li><li><p><a href="https://www.seas.upenn.edu/~cis1940/spring13/">Introduction to Haskell</a></p></li><li><p><a href="https://godbolt.org/">Compiler Explorer</a></p></li><li><p><a href="https://www.vocabulary.com/">Vocabulary.com</a></p></li><li><p><a href="http://blog.ezyang.com/2019/05/pytorch-internals/">PyTorch internals</a></p></li><li><p><a href="https://sci.hubg.org/">SCI-HUB</a></p></li><li><p><a href="https://www.coursera.org/">Coursera</a></p></li><li><p><a href="https://zh.cppreference.com/w/cpp">C++ 参考手册</a></p></li><li><p><a href="https://en.cppreference.com/w/">cppreference</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Books </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learning </tag>
            
            <tag> Books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Styling with Markdown</title>
      <link href="/2023/05/01/2023-05-01-styling-with-markdown/"/>
      <url>/2023/05/01/2023-05-01-styling-with-markdown/</url>
      
        <content type="html"><![CDATA[<p>First blog with markdown as an example.</p><p>This post can be found in <code>source/_posts</code> directory. Go ahead and edit it and re-build the site to see the changes.</p><p>To add new posts, simply add a file in the <code>_posts</code> directory that follows the convention <code>YYYY-MM-DD-name-of-post.md</code> and includes the necessary front matter.</p><center><img src="https://raw.githubusercontent.com/zhangbopd/PicsForBlog/main/2023-05/pig.gif" width="25%" height="25%">Figure from <a href="https://github.com/zhangbopd/PicsForBlog">PicsForBlog</a> with PicGo</center><h2 id="Quote"><a href="#Quote" class="headerlink" title="Quote"></a>Quote</h2><blockquote><p>Stay Hungry Stay Foolish</p></blockquote><h2 id="Code-block"><a href="#Code-block" class="headerlink" title="Code block"></a>Code block</h2><p>Haskell 优雅地实现快排</p><pre class="line-numbers language-haskell" data-language="haskell"><code class="language-haskell"><span class="token hvariable">quick_sort</span> <span class="token operator">::</span> <span class="token constant">Ord</span> <span class="token hvariable">a</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span><span class="token hvariable">quick_sort</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token hvariable">quick_sort</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span><span class="token hvariable">quick_sort</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">quick_sort</span> <span class="token punctuation">(</span><span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token operator">&lt;=</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span>                    <span class="token operator">++</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span>                    <span class="token operator">++</span> <span class="token hvariable">quick_sort</span> <span class="token punctuation">(</span><span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ordered-list"><a href="#Ordered-list" class="headerlink" title="Ordered list"></a>Ordered list</h2><ol><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ol><h2 id="Unordered-list"><a href="#Unordered-list" class="headerlink" title="Unordered list"></a>Unordered list</h2><ul><li>First item</li><li>Second item</li><li>Third item</li><li>Fourth item</li></ul><h2 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h2><table><thead><tr><th>Title 1</th><th>Title 2</th><th>Title 3</th><th>Title 4</th></tr></thead><tbody><tr><td>lorem</td><td>lorem</td><td>lorem</td><td>lorem</td></tr><tr><td>lorem</td><td>lorem</td><td>lorem</td><td>lorem</td></tr><tr><td>lorem</td><td>lorem</td><td>lorem</td><td>lorem</td></tr></tbody></table><hr><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Make sure <code>mathjax: true</code></p><p>$$<br>\begin{split}<br>\mathcal{C}\phi \delta e \mathfrak{M}\alpha th \mathit{I}n \mathcal{H}ex\sigma \mathbb{N}o\omega!<br>\end{split}<br>$$</p><p>Due to Hexo treating the <code>\\</code> as an escape character instead of a line break command in mathematical expressions, it only recognizes a single backslash, which results in the expression being displayed on a single line.</p><p>$$<br>\begin{split}<br>\frac{\partial{\mathcal{E}}}{\partial{x_l}} &amp; = \frac{\partial{\mathcal{E}}}{\partial{x_L}}\frac{\partial{x_L}}{\partial{x_l}}\\<br>&amp; = \frac{\partial{\mathcal{E}}}{\partial{x_L}}\Big(1+\frac{\partial{}}{\partial{x_l}}\sum_{i=l}^{L-1}\mathcal{F}(x_i,\mathcal{W}_i)\Big)<br>\end{split}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> Writing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
